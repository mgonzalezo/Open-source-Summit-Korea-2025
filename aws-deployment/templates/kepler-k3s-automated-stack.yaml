AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation stack for Kepler on bare-metal EC2 with K3s - Fully Automated with RAPL (Direct Hardware Measurements)'

Parameters:
  InstanceType:
    Description: EC2 instance type (bare-metal)
    Type: String
    Default: c5.metal
    AllowedValues:
      - c5.metal
      - m5.metal
      - m5d.metal
      - r5.metal
    ConstraintDescription: Must be a valid bare-metal instance type

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair

  SSHLocation:
    Description: IP address range that can SSH to the EC2 instance
    Type: String
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x

  VolumeSize:
    Description: EBS Volume size in GB
    Type: Number
    Default: 100
    MinValue: 50
    MaxValue: 500

  VpcId:
    Description: VPC ID for security group
    Type: AWS::EC2::VPC::Id
    ConstraintDescription: Must be a valid VPC ID

  AutoInstallKepler:
    Description: Automatically install Kepler with RAPL on boot
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Instance Configuration"
        Parameters:
          - InstanceType
          - KeyName
          - VolumeSize
          - AutoInstallKepler
      - Label:
          default: "Network Configuration"
        Parameters:
          - VpcId
          - SSHLocation

Resources:
  # Security Group with all required ports
  KeplerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: kepler-k3s-security-group
      GroupDescription: Security group for Kepler K3s cluster with RAPL
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
          Description: SSH access
        - IpProtocol: tcp
          FromPort: 6443
          ToPort: 6443
          CidrIp: !Ref SSHLocation
          Description: Kubernetes API Server
        - IpProtocol: tcp
          FromPort: 30080
          ToPort: 30080
          CidrIp: 0.0.0.0/0
          Description: Kepler HTTP Metrics
        - IpProtocol: tcp
          FromPort: 30443
          ToPort: 30443
          CidrIp: 0.0.0.0/0
          Description: Kepler HTTPS Metrics (NodePort)
        - IpProtocol: tcp
          FromPort: 30800
          ToPort: 30800
          CidrIp: 0.0.0.0/0
          Description: MCP Server (SSE)
        - IpProtocol: tcp
          FromPort: 28282
          ToPort: 28282
          CidrIp: !Ref SSHLocation
          Description: Kepler Internal Metrics
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic
      Tags:
        - Key: Name
          Value: kepler-k3s-sg
        - Key: Project
          Value: Kepler-OSS-Korea-2025

  # IAM Role for EC2
  KeplerEC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: kepler-k3s-ec2-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Tags:
        - Key: Name
          Value: kepler-k3s-ec2-role
        - Key: Project
          Value: Kepler-OSS-Korea-2025

  KeplerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: kepler-k3s-instance-profile
      Roles:
        - !Ref KeplerEC2Role

  # EC2 Instance with automated Kepler setup
  KeplerBareMetalInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Sub '{{resolve:ssm:/aws/service/canonical/ubuntu/server/24.04/stable/current/amd64/hvm/ebs-gp3/ami-id}}'
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref KeplerInstanceProfile
      SecurityGroupIds:
        - !Ref KeplerSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: !Ref VolumeSize
            VolumeType: gp3
            DeleteOnTermination: true
            Encrypted: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -e

          # Log all output
          exec > >(tee /var/log/user-data.log)
          exec 2>&1

          echo "========================================="
          echo "Starting Kepler K3s Setup"
          echo "Time: $(date)"
          echo "========================================="

          # Update system
          echo "Updating system..."
          apt-get update
          DEBIAN_FRONTEND=noninteractive apt-get upgrade -y

          # Install dependencies
          echo "Installing dependencies..."
          apt-get install -y \
              curl \
              wget \
              git \
              jq \
              unzip \
              make \
              msr-tools \
              linux-tools-common \
              linux-tools-generic

          # Enable RAPL for direct hardware power measurements
          echo "Enabling RAPL (Running Average Power Limit)..."
          apt-get install -y linux-modules-$(uname -r) linux-modules-extra-$(uname -r)

          # Load RAPL modules
          modprobe msr
          modprobe intel_rapl_common
          modprobe intel_rapl_msr

          # Make modules load on boot
          echo "msr" >> /etc/modules
          echo "intel_rapl_common" >> /etc/modules
          echo "intel_rapl_msr" >> /etc/modules

          # Verify RAPL is working
          echo "Verifying RAPL..."
          if [ -d "/sys/class/powercap/intel-rapl:0" ]; then
            echo "✅ RAPL enabled successfully"
            ls -la /sys/class/powercap/ | grep intel-rapl
          else
            echo "⚠️ RAPL zones not found, will fall back to model-based estimation"
          fi

          # Install Docker for MCP server image builds
          echo "Installing Docker..."
          apt-get install -y docker.io
          systemctl start docker
          systemctl enable docker
          usermod -aG docker ubuntu
          echo "Docker installed: $(docker --version)"

          # Install K3s
          echo "Installing K3s..."
          curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC="server --disable traefik" sh -

          # Wait for K3s to be ready
          echo "Waiting for K3s to be ready..."
          sleep 30
          until kubectl get nodes 2>/dev/null; do
            echo "Waiting for K3s..."
            sleep 5
          done

          # Setup kubectl for ubuntu user
          mkdir -p /home/ubuntu/.kube
          cp /etc/rancher/k3s/k3s.yaml /home/ubuntu/.kube/config
          chown -R ubuntu:ubuntu /home/ubuntu/.kube
          chmod 600 /home/ubuntu/.kube/config

          # Install Helm
          echo "Installing Helm..."
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

          # Install kustomize
          echo "Installing kustomize..."
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          mv kustomize /usr/local/bin/

          # Create automated Kepler setup script with RAPL
          cat > /home/ubuntu/setup-kepler-automated.sh << 'EOFSETUP'
          #!/bin/bash
          set -e

          echo "========================================="
          echo "Automated Kepler + RAPL Setup"
          echo "========================================="

          export KUBECONFIG=/etc/rancher/k3s/k3s.yaml

          # Wait for K3s
          echo "Waiting for K3s to be fully ready..."
          kubectl wait --for=condition=ready node --all --timeout=300s

          # Download Kepler v0.11.2 Helm chart
          echo "Downloading Kepler v0.11.2..."
          cd /home/ubuntu
          wget -q https://github.com/sustainable-computing-io/kepler/archive/refs/tags/v0.11.2.tar.gz
          tar -xzf v0.11.2.tar.gz

          # Create Helm values for Kepler with RAPL (direct hardware measurements)
          cat > /tmp/kepler-values.yaml << 'EOFVALUES'
          image:
            repository: quay.io/sustainable_computing_io/kepler
            pullPolicy: Always
            tag: v0.11.2

          config:
            log:
              level: info
              format: text
            host:
              sysfs: /host/sys
              procfs: /host/proc
            monitor:
              interval: 5s
              staleness: 500ms
              maxTerminated: 500
              minTerminatedEnergyThreshold: 10
            rapl:
              zones: []  # Empty = auto-detect RAPL zones
            exporter:
              stdout:
                enabled: false
              prometheus:
                enabled: true
                debugCollectors:
                  - go
                metricsLevel:
                  - node
                  - pod
                  - container
                  - process
            web:
              configFile: ""
              listenAddresses:
                - :28282
            debug:
              pprof:
                enabled: false
            kube:
              enabled: false
              config: ""
              nodeName: ""
            dev:
              fake-cpu-meter:
                enabled: false  # Disabled - using RAPL instead!
            model:
              enabled: false  # Disabled - using RAPL instead!

          daemonset:
            hostPID: true
            tolerations:
              - operator: Exists
            securityContext:
              privileged: true
            resources:
              limits:
                cpu: 1000m
                memory: 1Gi
              requests:
                cpu: 200m
                memory: 256Mi
            extraVolumes:
              - name: proc
                hostPath:
                  path: /proc
                  type: Directory
              - name: sys
                hostPath:
                  path: /sys
                  type: Directory
              - name: dev-cpu
                hostPath:
                  path: /dev/cpu
                  type: Directory
            extraVolumeMounts:
              - name: proc
                mountPath: /host/proc
                readOnly: true
              - name: sys
                mountPath: /host/sys
                readOnly: true
              - name: dev-cpu
                mountPath: /dev/cpu
                readOnly: true

          service:
            type: ClusterIP
            port: 28282
            targetPort: 28282

          rbac:
            create: true

          serviceAccount:
            create: true
            name: kepler
          EOFVALUES

          # Install Kepler via Helm
          echo "Installing Kepler v0.11.2 via Helm..."
          helm install kepler ./kepler-0.11.2/manifests/helm/kepler \
            --namespace kepler-system \
            --create-namespace \
            -f /tmp/kepler-values.yaml \
            --wait \
            --timeout 10m

          # RAPL is now enabled - Kepler will use direct hardware measurements
          echo "Kepler deployed with RAPL (direct hardware power measurements)"
          echo "No Model Server needed - using Intel RAPL zones"

          # Deploy HTTPS Proxy for Kepler metrics
          echo "Setting up HTTPS access for Kepler metrics..."

          # Generate self-signed certificate with OpenSSL
          echo "Generating self-signed TLS certificate..."
          openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
            -keyout /tmp/tls.key \
            -out /tmp/tls.crt \
            -subj "/CN=kepler.local/O=kepler" \
            -addext "subjectAltName=DNS:kepler.local,DNS:kepler.kepler-system.svc,DNS:kepler.kepler-system.svc.cluster.local"

          # Create Kubernetes secret with TLS certificate
          kubectl create secret tls kepler-tls-secret \
            --cert=/tmp/tls.crt \
            --key=/tmp/tls.key \
            -n kepler-system

          # Deploy HTTPS proxy
          cat > /tmp/kepler-https-proxy.yaml << 'EOFPROXY'
          ---
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: kepler-nginx-config
            namespace: kepler-system
          data:
            nginx.conf: |
              events {
                worker_connections 1024;
              }

              http {
                server {
                  listen 8443 ssl;
                  server_name _;

                  ssl_certificate /etc/nginx/ssl/tls.crt;
                  ssl_certificate_key /etc/nginx/ssl/tls.key;
                  ssl_protocols TLSv1.2 TLSv1.3;
                  ssl_ciphers HIGH:!aNULL:!MD5;

                  location / {
                    proxy_pass http://kepler.kepler-system.svc.cluster.local:28282;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                  }
                }
              }
          ---
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: kepler-https-proxy
            namespace: kepler-system
            labels:
              app: kepler-https-proxy
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: kepler-https-proxy
            template:
              metadata:
                labels:
                  app: kepler-https-proxy
              spec:
                containers:
                - name: nginx
                  image: nginx:alpine
                  ports:
                  - containerPort: 8443
                    name: https
                  volumeMounts:
                  - name: nginx-config
                    mountPath: /etc/nginx/nginx.conf
                    subPath: nginx.conf
                  - name: tls-cert
                    mountPath: /etc/nginx/ssl
                    readOnly: true
                volumes:
                - name: nginx-config
                  configMap:
                    name: kepler-nginx-config
                - name: tls-cert
                  secret:
                    secretName: kepler-tls-secret
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: kepler-https
            namespace: kepler-system
            labels:
              app: kepler-https-proxy
          spec:
            type: NodePort
            selector:
              app: kepler-https-proxy
            ports:
              - name: https
                port: 8443
                targetPort: 8443
                nodePort: 30443
                protocol: TCP
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: kepler-http
            namespace: kepler-system
          spec:
            type: NodePort
            selector:
              app.kubernetes.io/name: kepler
            ports:
              - name: http
                port: 28282
                targetPort: 28282
                nodePort: 30080
                protocol: TCP
          EOFPROXY

          kubectl apply -f /tmp/kepler-https-proxy.yaml

          # Wait for HTTPS proxy
          kubectl wait --for=condition=ready pod -l app=kepler-https-proxy -n kepler-system --timeout=300s

          # Clone the repository for MCP server and test workloads
          echo ""
          echo "========================================="
          echo "Cloning Open Source Summit Korea 2025 repository..."
          echo "========================================="
          cd /home/ubuntu
          if [ -d "Open-source-Summit-Korea-2025" ]; then
            rm -rf Open-source-Summit-Korea-2025
          fi
          git clone https://github.com/marcosgonzalezo/Open-source-Summit-Korea-2025.git
          chown -R ubuntu:ubuntu Open-source-Summit-Korea-2025

          # Deploy test workloads for compliance demonstrations
          echo ""
          echo "========================================="
          echo "Deploying test workloads for compliance demos..."
          echo "========================================="
          kubectl apply -f /home/ubuntu/Open-source-Summit-Korea-2025/carbon-kepler-mcp/k8s/test-workloads.yaml

          echo "Waiting for test workloads to be ready..."
          kubectl wait --for=condition=ready pod -l app=nginx-light -n workload-test --timeout=120s || true
          kubectl wait --for=condition=ready pod -l app=redis-cache -n workload-test --timeout=120s || true
          kubectl wait --for=condition=ready pod -l app=stress-cpu -n workload-test --timeout=120s || true

          echo "Test workloads deployed:"
          kubectl get pods -n workload-test -o wide

          # Build and deploy Carbon-Kepler MCP Server
          echo ""
          echo "========================================="
          echo "Building and deploying Carbon-Kepler MCP Server..."
          echo "========================================="

          cd /home/ubuntu/Open-source-Summit-Korea-2025/carbon-kepler-mcp

          # Build Docker image
          echo "Building carbon-kepler-mcp Docker image..."
          docker build -t carbon-kepler-mcp:latest .

          # Import into K3s containerd
          echo "Importing image into K3s containerd..."
          docker save carbon-kepler-mcp:latest | k3s ctr images import -

          # Create namespace
          kubectl create namespace carbon-mcp || true

          # Deploy MCP server
          echo "Deploying MCP server to Kubernetes..."
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml

          # Wait for MCP server to be ready
          echo "Waiting for MCP server to be ready..."
          kubectl wait --for=condition=ready pod -l app=carbon-mcp-server -n carbon-mcp --timeout=300s

          echo "MCP Server deployed successfully!"
          kubectl get pods -n carbon-mcp -o wide

          echo ""
          echo "========================================="
          echo "✅ Setup Complete!"
          echo "========================================="
          echo ""
          echo "Kepler Status:"
          kubectl get pods -n kepler-system
          echo ""
          echo "Test Workloads:"
          kubectl get pods -n workload-test
          echo ""
          echo "MCP Server:"
          kubectl get pods -n carbon-mcp
          echo ""
          echo "RAPL Status:"
          echo "  Checking RAPL zones..."
          ls -la /sys/class/powercap/ | grep intel-rapl || echo "  ⚠️  RAPL zones not visible (check logs)"
          echo ""
          echo "Access Metrics:"
          INSTANCE_IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)
          echo "  HTTPS: curl -k https://$INSTANCE_IP:30443/metrics"
          echo "  HTTP:  curl http://$INSTANCE_IP:30080/metrics"
          echo "  MCP SSE: curl -N http://$INSTANCE_IP:30800/sse"
          echo ""
          echo "Deployment Summary saved to: /home/ubuntu/kepler-info.txt"

          # Save deployment info
          cat > /home/ubuntu/kepler-info.txt << EOFINFO
          Kepler + MCP Deployment Information for Open Source Summit Korea 2025
          ======================================================================

          Instance IP: $INSTANCE_IP

          Endpoints:
          ----------
          Kepler HTTPS Metrics: https://$INSTANCE_IP:30443/metrics
          Kepler HTTP Metrics:  http://$INSTANCE_IP:30080/metrics
          MCP SSE Endpoint:     http://$INSTANCE_IP:30800/sse

          Components Deployed:
          -------------------
          1. Kepler v0.11.2 (Power Measurement)
             - DaemonSet in kepler-system namespace
             - Intel RAPL (Direct Hardware Power Measurements)
             - HTTPS Proxy (Nginx with self-signed cert)

          2. Carbon-Kepler MCP Server
             - FastMCP 2.12.5 (SSE Transport)
             - Namespace: carbon-mcp
             - 8 tools for carbon-aware workload compliance
             - Korean Environmental Standards compliance checks

          3. Test Workloads (workload-test namespace)
             - nginx-light: Low-power web server (COMPLIANT)
             - redis-cache: Medium-power cache (COMPLIANT)
             - stress-cpu: High-power compute (2 replicas for testing)

          Power Measurement Configuration:
          -------------------------------
          - Method: RAPL (Intel Running Average Power Limit)
          - RAPL Modules: msr, intel_rapl_common, intel_rapl_msr
          - RAPL Zones: Auto-detected (package + dram)
          - Metrics: procfs/sysfs CPU, memory, process tracking + RAPL energy
          - Collection Interval: 5 seconds

          Korean Environmental Standards:
          ------------------------------
          - 탄소중립 녹색성장 기본법: 424 gCO2eq/kWh
          - 에너지이용 합리화법: PUE ≤ 1.4

          Quick Access Commands:
          ---------------------
          # View all deployments
          kubectl get pods -A

          # Kepler metrics
          curl -k -s https://$INSTANCE_IP:30443/metrics | grep kepler_node_package_energy_joule

          # Test workloads
          kubectl get pods -n workload-test -o wide

          # MCP Server
          kubectl get pods -n carbon-mcp
          kubectl logs -n carbon-mcp -l app=carbon-mcp-server

          # Test MCP SSE connection
          curl -N -H "Accept: text/event-stream" http://$INSTANCE_IP:30800/sse

          Verify RAPL Working:
          -------------------
          ls -la /sys/class/powercap/
          lsmod | grep rapl
          curl -k -s https://$INSTANCE_IP:30443/metrics | grep 'zone="package"'
          curl -k -s https://$INSTANCE_IP:30443/metrics | grep 'zone="dram"'

          Windows Claude Desktop Configuration:
          ------------------------------------
          1. Copy mcp-sse-bridge-windows.js to C:\\Users\\<username>\\
          2. Update claude_desktop_config.json:
          {
            "mcpServers": {
              "carbon-kepler": {
                "command": "node",
                "args": [
                  "C:\\\\Users\\\\<username>\\\\mcp-sse-bridge-windows.js",
                  "http://$INSTANCE_IP:30800/sse"
                ]
              }
            }
          }

          Repository Location:
          -------------------
          /home/ubuntu/Open-source-Summit-Korea-2025/

          MCP Server Code: carbon-kepler-mcp/
          Test Workloads: carbon-kepler-mcp/k8s/test-workloads.yaml
          Bridge Script: mcp-sse-bridge-windows.js
          EOFINFO

          chown ubuntu:ubuntu /home/ubuntu/kepler-info.txt

          EOFSETUP

          chmod +x /home/ubuntu/setup-kepler-automated.sh
          chown ubuntu:ubuntu /home/ubuntu/setup-kepler-automated.sh

          # Create useful aliases
          cat > /home/ubuntu/.bash_aliases << 'EOFALIAS'
          alias k='kubectl'
          alias kgp='kubectl get pods -A'
          alias kgn='kubectl get nodes'
          alias klogs='kubectl logs -f'
          alias kdesc='kubectl describe'
          export KUBECONFIG=/home/ubuntu/.kube/config
          export PATH=$PATH:/usr/local/bin
          EOFALIAS

          chown ubuntu:ubuntu /home/ubuntu/.bash_aliases

          # Auto-install if enabled
          if [ "${AutoInstallKepler}" = "true" ]; then
            echo "Auto-installing Kepler..."
            sudo -u ubuntu bash /home/ubuntu/setup-kepler-automated.sh
          fi

          # Create completion marker
          echo "Setup completed at $(date)" > /var/log/user-data-complete.log
          echo "========================================="
          echo "User data script completed!"
          echo "========================================="
      Tags:
        - Key: Name
          Value: kepler-k3s-baremetal
        - Key: Project
          Value: Kepler-OSS-Korea-2025
        - Key: Purpose
          Value: Kepler-Demo-Automated

  # Elastic IP
  KeplerEIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref KeplerBareMetalInstance
      Tags:
        - Key: Name
          Value: kepler-k3s-eip
        - Key: Project
          Value: Kepler-OSS-Korea-2025

Outputs:
  InstanceId:
    Description: Instance ID of the bare-metal server
    Value: !Ref KeplerBareMetalInstance
    Export:
      Name: !Sub '${AWS::StackName}-InstanceId'

  PublicIP:
    Description: Public IP address of the server
    Value: !Ref KeplerEIP
    Export:
      Name: !Sub '${AWS::StackName}-PublicIP'

  SSHCommand:
    Description: SSH command to connect to the server
    Value: !Sub 'ssh -i ${KeyName}.pem ubuntu@${KeplerEIP}'

  HTTPSMetricsURL:
    Description: HTTPS URL for Kepler metrics (use -k flag with curl)
    Value: !Sub 'https://${KeplerEIP}:30443/metrics'

  HTTPMetricsURL:
    Description: HTTP URL for Kepler metrics
    Value: !Sub 'http://${KeplerEIP}:30080/metrics'

  MCPSSEEndpoint:
    Description: MCP SSE endpoint for Claude Desktop integration
    Value: !Sub 'http://${KeplerEIP}:30800/sse'

  TestCommand:
    Description: Test Kepler metrics endpoint
    Value: !Sub 'curl -k https://${KeplerEIP}:30443/metrics | grep kepler_node'

  MCPTestCommand:
    Description: Test MCP SSE connection
    Value: !Sub 'curl -N -H "Accept: text/event-stream" http://${KeplerEIP}:30800/sse'

  SetupStatus:
    Description: How to check setup status
    Value: !Sub |
      SSH Command: ssh -i ${KeyName}.pem ubuntu@${KeplerEIP}
      Check logs: tail -f /var/log/user-data.log
      Deployment info: cat /home/ubuntu/kepler-info.txt

  ComponentsDeployed:
    Description: List of deployed components
    Value: !Sub |
      ✅ Kepler v0.11.2 with RAPL (kepler-system namespace)
      ✅ Carbon-Kepler MCP Server with 8 tools (carbon-mcp namespace)
      ✅ Test Workloads: nginx-light, redis-cache, stress-cpu (workload-test namespace)

      MCP SSE Endpoint: http://${KeplerEIP}:30800/sse

      Windows Claude Desktop Config:
      {
        "mcpServers": {
          "carbon-kepler": {
            "command": "node",
            "args": ["C:\\Users\\<username>\\mcp-sse-bridge-windows.js", "http://${KeplerEIP}:30800/sse"]
          }
        }
      }

  InstanceType:
    Description: Instance type used
    Value: !Ref InstanceType

  SecurityGroupId:
    Description: Security Group ID
    Value: !Ref KeplerSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroupId'

  CostEstimate:
    Description: Approximate hourly cost
    Value: !Sub 'Instance ${InstanceType} costs approximately $4.08/hour in us-east-1. Budget: $344.70 = ~84 hours'
